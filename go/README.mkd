# Desafio

## CONTINUOUS INTEGRATION

#### 1 - Crie um aplicativo Go
- com uma funcção greenting
- que disponibilize um servidor web na porta 8000
- que exiba em HTML (em negrito) Code.education Rocks!

```go
package main

import (
	"fmt"
	"log"
	"net/http"
)

func greeting(message string) string {
    return fmt.Sprintf("<b>%s</b>", message)
}

func handler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, greeting("Code.education Rocks!") )
}

func main() {
	http.HandleFunc("/", handler)
	log.Fatal(http.ListenAndServe(":8000", nil))
}

```

#### 3 - Criar o teste dessa função.
```sh
package main

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestGreeting(t *testing.T) {
	got := greeting("Code.education Rocks!")
    want := "<b>Code.education Rocks!</b>"

	if got != want {
       t.Errorf("Greeting return unexpected string: got %s want %s!", got, want)
    }
}
```
Executando o conteiner localmente para testes

```sh
$ docker run --publish 8000:8000 --name greeeting --rm fbrz/greeting:prod
```

#### 4 - Ative o processo de CI no Google Cloud Build para que a cada PR os testes sejam executados
![CI](ci-cloudbuild.png)


#### 5 - Gerar a imagem do aplicativo e publicar no dockerhub

```sh
# Construindo a imagem de produção
$ docker build -f Dockerfile.prod -t fbrz/codeeducation:prod . --no-cache

# Publicando a imagem no dockerhub
$ docker push fbrz/greeting:prod

# Executar a aplicação na porta 8000
$ docker run --publish 8000:8000 --name greeeting --rm fbrz/greeting:prod
```
Imagem publicada em: https://hub.docker.com/r/fbrz/greeting

6 - Utilizando o Kubernetes, disponibilize o serviço do tipo Load Balancer para publicar a aplicação.    
